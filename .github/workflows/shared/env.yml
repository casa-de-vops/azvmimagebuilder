# .github/workflows/tasks/resolve.yml
name: Resolve Image Builder Template
on:
  workflow_call:
    inputs:
      templateFolder:   { required: true, type: string }
      templateName:     { required: true, type: string }
      sigResourceGroup: { required: true, type: string }
      imageDefName:     { required: true, type: string }
      sigName:          { required: true, type: string }
      location:         { required: true, type: string }
      additionalregion: { required: true, type: string }
      runOutputName:    { required: true, type: string }
    secrets:
      AZURE_SUBSCRIPTION_ID: { required: true }

    outputs:
      resolved_path:
        description: "Relative path to the fully‑parametrised template"
        value: ${{ jobs.resolve.outputs.resolved_path }}
      img_template_name:
        description: "runOutputName‑release_version"
        value: ${{ jobs.resolve.outputs.img_template_name }}
      release_version:
        value: ${{ jobs.resolve.outputs.release_version }}

jobs:
  resolve:
    runs-on: ubuntu-latest
    env:
      SUB_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    outputs:
      resolved_path:     ${{ steps.outvars.outputs.resolved_path }}
      img_template_name: ${{ steps.outvars.outputs.img_template_name }}
      release_version:   ${{ steps.outvars.outputs.release_version }}

    steps:
      # 1️⃣  Checkout
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1

      # 2️⃣  Show the inputs (easier debugging)
      - name: Echo inputs
        shell: bash
        run: |
          echo "Template folder : ${{ inputs.templateFolder }}"
          echo "Template file   : ${{ inputs.templateName }}"
          echo "SIG RG          : ${{ inputs.sigResourceGroup }}"
          echo "Image def name  : ${{ inputs.imageDefName }}"
          echo "SIG name        : ${{ inputs.sigName }}"
          echo "Primary region  : ${{ inputs.location }}"
          echo "Replica region  : ${{ inputs.additionalregion }}"
          echo "Run output name : ${{ inputs.runOutputName }}"

      # 3️⃣  Generate a timestamp‑based version
      - name: Generate version
        id: ver
        shell: bash
        run: |
          set -euo pipefail
          VERSION=$(date +%Y%m%d%H%M%S)
          echo "release_version=$VERSION" >> "$GITHUB_OUTPUT"
          echo "Using release_version=$VERSION"

      # 4️⃣  Sanity‑check the source template
      - name: Verify template exists
        shell: bash
        run: |
          set -euo pipefail
          SRC="templates/${{ inputs.templateFolder }}/${{ inputs.templateName }}"
          if [[ ! -f "$SRC" ]]; then
            echo "::error::Template not found: $SRC"
            exit 1
          fi

      # 5️⃣  Replace tokens
      - name: Replace placeholders
        id: templ
        shell: bash
        env:
          RG:         ${{ inputs.sigResourceGroup }}
          IMG_DEF:    ${{ inputs.imageDefName }}
          SIG_NAME:   ${{ inputs.sigName }}
          REGION1:    ${{ inputs.location }}
          REGION2:    ${{ inputs.additionalregion }}
          RUN_OUT:    ${{ inputs.runOutputName }}
          VERSION:    ${{ steps.ver.outputs.release_version }}
        run: |
          set -euo pipefail
          SRC="templates/${{ inputs.templateFolder }}/${{ inputs.templateName }}"
          TARGET=".resolved-${{ inputs.templateName }}"
          cp "$SRC" "$TARGET"

          IMG_BUILDER_ID="/subscriptions/${SUB_ID}/resourceGroups/${RG}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/rai-identity"

          sed -i -e "s|<subscriptionID>|${SUB_ID}|g"        "$TARGET"
          sed -i -e "s|<rgName>|${RG}|g"                    "$TARGET"
          sed -i -e "s|<imageDefName>|${IMG_DEF}|g"         "$TARGET"
          sed -i -e "s|<sharedImageGalName>|${SIG_NAME}|g"  "$TARGET"
          sed -i -e "s|<region1>|${REGION1}|g"              "$TARGET"
          sed -i -e "s|<region2>|${REGION2}|g"              "$TARGET"
          sed -i -e "s|<runOutputName>|${RUN_OUT}|g"        "$TARGET"
          sed -i -e "s%<imgBuilderId>%${IMG_BUILDER_ID}%g"  "$TARGET"

          echo "resolved_path=$TARGET" >> "$GITHUB_OUTPUT"

      # 6️⃣  Expose outputs for downstream tasks
      - name: Set composite outputs
        id: outvars
        shell: bash
        env:
          RES:   ${{ steps.templ.outputs.resolved_path }}
          RUN:   ${{ inputs.runOutputName }}
          VER:   ${{ steps.ver.outputs.release_version }}
        run: |
          echo "resolved_path=${RES}"             >> "$GITHUB_OUTPUT"
          echo "img_template_name=${RUN}-${VER}"   >> "$GITHUB_OUTPUT"
          echo "release_version=${VER}"            >> "$GITHUB_OUTPUT"

      # 7️⃣  Upload the resolved template
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: resolved-image-template
          path: ${{ steps.templ.outputs.resolved_path }}
