name: Deploy Azure VM from Gallery

description: |
  This workflow deploys Azure Virtual Machines from Shared Image Gallery images.
  It supports both Linux (with certificate authentication) and Windows (with password authentication) VMs.
  The workflow uses modular composite actions for validation, deployment, and cleanup.

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment Environment'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - staging
        - prod
      vmType:
        description: 'VM Operating System'
        required: true
        default: 'linux'
        type: choice
        options:
        - linux
        - windows
      imageName:
        description: 'Gallery Image Name'
        required: true
        default: 'GoldenLinuxImage'
        type: choice
        options:
        - GoldenLinuxImage
        - GoldenRHELImage
        - GoldenWindowsImage
      vmSize:
        description: 'Virtual Machine Size'
        required: true
        default: 'Standard_DS2_v2'
        type: choice
        options:
        - Standard_DS2_v2
        - Standard_DS3_v2
        - Standard_DS4_v2
        - Standard_B2s
        - Standard_B2ms
        - Standard_B4ms
      enableAutoShutdown:
        description: 'Enable Auto-Shutdown (Windows only)'
        required: false
        default: false
        type: boolean
      customVmName:
        description: 'Custom VM Name (leave empty for auto-generated)'
        required: false
        type: string

permissions:
  contents: read
  id-token: write

jobs:
  validate-inputs:
    runs-on: ubuntu-latest
    outputs:
      vm-name: ${{ steps.generate-name.outputs.vm-name }}
      template-path: ${{ steps.set-template.outputs.template-path }}
      deployment-name: ${{ steps.generate-name.outputs.deployment-name }}
    steps:
    - name: Validate Image Selection
      run: |
        if [[ "${{ github.event.inputs.vmType }}" == "linux" ]]; then
          if [[ "${{ github.event.inputs.imageName }}" == "GoldenWindowsImage" ]]; then
            echo "❌ Error: Cannot deploy Windows image on Linux VM type"
            exit 1
          fi
        elif [[ "${{ github.event.inputs.vmType }}" == "windows" ]]; then
          if [[ "${{ github.event.inputs.imageName }}" != "GoldenWindowsImage" ]]; then
            echo "❌ Error: Cannot deploy Linux/RHEL image on Windows VM type"
            exit 1
          fi
        fi
        echo "✅ Image selection validated"

    - name: Generate VM Name and Deployment Name
      id: generate-name
      run: |
        if [[ -n "${{ github.event.inputs.customVmName }}" ]]; then
          VM_NAME="${{ github.event.inputs.customVmName }}"
        else
          TIMESTAMP=$(date +%Y%m%d%H%M)
          VM_NAME="vm-${{ github.event.inputs.environment }}-${{ github.event.inputs.vmType }}-${TIMESTAMP}"
        fi
        
        DEPLOYMENT_NAME="deploy-${VM_NAME}-$(date +%Y%m%d%H%M%S)"
        
        echo "vm-name=${VM_NAME}" >> $GITHUB_OUTPUT
        echo "deployment-name=${DEPLOYMENT_NAME}" >> $GITHUB_OUTPUT
        
        echo "🏷️ Generated VM Name: ${VM_NAME}"
        echo "📋 Generated Deployment Name: ${DEPLOYMENT_NAME}"

    - name: Set Template Path
      id: set-template
      run: |
        if [[ "${{ github.event.inputs.vmType }}" == "linux" ]]; then
          TEMPLATE_PATH="./templates/10_Virtual_Machine_Deployment_Template/azuredeploy.linux.json"
        else
          TEMPLATE_PATH="./templates/10_Virtual_Machine_Deployment_Template/azuredeploy.windows.json"
        fi
        echo "template-path=${TEMPLATE_PATH}" >> $GITHUB_OUTPUT
        echo "📄 Using template: ${TEMPLATE_PATH}"

  deploy-vm:
    runs-on: ubuntu-latest
    needs: validate-inputs
    environment: ${{ github.event.inputs.environment }}
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Azure Login
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Validate Azure Resources
      uses: ./.github/actions/validate-azure-resources
      with:
        resource-group: ${{ secrets.AZURE_RESOURCE_GROUP }}
        subnet-id: ${{ secrets.SUBNET_ID }}
        keyvault-id: ${{ secrets.KEYVAULT_ID }}
        vm-type: ${{ github.event.inputs.vmType }}

    - name: Validate ARM Template
      uses: ./.github/actions/validate-arm-template
      with:
        template-path: ${{ needs.validate-inputs.outputs.template-path }}
        resource-group: ${{ secrets.AZURE_RESOURCE_GROUP }}
        deployment-name: ${{ needs.validate-inputs.outputs.deployment-name }}
        vm-type: ${{ github.event.inputs.vmType }}
        vm-name: ${{ needs.validate-inputs.outputs.vm-name }}
        admin-username: ${{ secrets.VM_ADMIN_USERNAME }}
        admin-password: ${{ secrets.VM_ADMIN_PASSWORD }}
        subnet-id: ${{ secrets.SUBNET_ID }}
        image-name: ${{ github.event.inputs.imageName }}
        vm-size: ${{ github.event.inputs.vmSize }}
        keyvault-id: ${{ secrets.KEYVAULT_ID }}
        certificate-url: ${{ secrets.CERTIFICATE_URL }}
        enable-auto-shutdown: ${{ github.event.inputs.enableAutoShutdown }}

    - name: Deploy Azure VM
      id: deploy-vm
      uses: ./.github/actions/deploy-azure-vm
      with:
        template-path: ${{ needs.validate-inputs.outputs.template-path }}
        resource-group: ${{ secrets.AZURE_RESOURCE_GROUP }}
        deployment-name: ${{ needs.validate-inputs.outputs.deployment-name }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        vm-type: ${{ github.event.inputs.vmType }}
        vm-name: ${{ needs.validate-inputs.outputs.vm-name }}
        admin-username: ${{ secrets.VM_ADMIN_USERNAME }}
        admin-password: ${{ secrets.VM_ADMIN_PASSWORD }}
        subnet-id: ${{ secrets.SUBNET_ID }}
        image-name: ${{ github.event.inputs.imageName }}
        vm-size: ${{ github.event.inputs.vmSize }}
        keyvault-id: ${{ secrets.KEYVAULT_ID }}
        certificate-url: ${{ secrets.CERTIFICATE_URL }}
        enable-auto-shutdown: ${{ github.event.inputs.enableAutoShutdown }}

    - name: Generate Deployment Report
      uses: ./.github/actions/generate-deployment-report
      with:
        environment: ${{ github.event.inputs.environment }}
        vm-type: ${{ github.event.inputs.vmType }}
        vm-name: ${{ needs.validate-inputs.outputs.vm-name }}
        image-name: ${{ github.event.inputs.imageName }}
        vm-size: ${{ github.event.inputs.vmSize }}
        resource-group: ${{ secrets.AZURE_RESOURCE_GROUP }}
        deployment-name: ${{ needs.validate-inputs.outputs.deployment-name }}
        vm-resource-id: ${{ steps.deploy-vm.outputs.vm-resource-id }}
        private-ip: ${{ steps.deploy-vm.outputs.private-ip }}
        network-interface-id: ${{ steps.deploy-vm.outputs.network-interface-id }}
        enable-auto-shutdown: ${{ github.event.inputs.enableAutoShutdown }}

  cleanup-on-failure:
    runs-on: ubuntu-latest
    needs: [validate-inputs, deploy-vm]
    if: always() && failure()
    steps:
    - name: Azure Login
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Cleanup Failed VM Deployment
      uses: ./.github/actions/cleanup-failed-vm-deployment
      with:
        resource-group: ${{ secrets.AZURE_RESOURCE_GROUP }}
        vm-name: ${{ needs.validate-inputs.outputs.vm-name }}
        vm-type: ${{ github.event.inputs.vmType }}
