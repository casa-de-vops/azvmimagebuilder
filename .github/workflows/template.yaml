# .github/workflows/template.yaml
name: "[Template] Build and distribute custom VM image"

description: |
  Reusable workflow that builds and distributes a custom VM image with
  Azure Image Builder (AIB) and publishes the resolved template as an
  artifact.

on:
  workflow_call:
    inputs:
      templateFolder: { required: true, type: string }
      templateName: { required: true, type: string }
      sigResourceGroup: { required: true, type: string }
      imageDefName: { required: true, type: string }
      sigName: { required: true, type: string }
      uaiIdentityName: { required: true, type: string }
      location: { required: true, type: string }
      additionalregion: { required: true, type: string }
      runOutputName: { required: true, type: string }
      templateType:
        description: "armTemplate | imageTemplate. Allowed values: 'armTemplate', 'imageTemplate'."
        type: string
        required: true

    secrets:
      AZURE_CLIENT_ID: { required: true }
      AZURE_TENANT_ID: { required: true }
      AZURE_SUBSCRIPTION_ID: { required: true }

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: write
  id-token: write
  actions: read
  security-events: write

jobs:
  PREPARE-IMAGE-TEMPLATE:
    runs-on: "windows-latest"

    env:
      SUB_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      SIG_RG: ${{ inputs.sigResourceGroup }}
      TEMPLATE_FILE: ${{ inputs.templateName }}
      TEMPLATE_DIR: templates/${{ inputs.templateFolder }}
      TEMPLATE_TYPE: ${{ inputs.templateType }}
      IMAGE_DEF: ${{ inputs.imageDefName }}
      SIG_NAME: ${{ inputs.sigName }}
      PRIMARY_REGION: ${{ inputs.location }}
      ADDL_REGION: ${{ inputs.additionalregion }}
      RUN_OUTPUT: ${{ inputs.runOutputName }}
      IMG_BUILDER_ID: "/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ inputs.sigResourceGroup }}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/${{ inputs.uaiIdentityName }}"

    outputs:
      release_version: ${{ steps.set_version.outputs.release_version }}
      image_template_name: ${{ steps.set_version.outputs.image_template_name }}

    steps:
      # ─────────────────────────────────────────────────────────────
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          enable-AzPSSession: true

      # ── Version = run‑number‑shortSHA ───────────────────────────
      - name: Set version
        id: set_version
        shell: bash
        run: |
          set -euo pipefail
          SHORT_SHA=$(echo "${GITHUB_SHA}" | cut -c1-7)
          VERSION="${GITHUB_RUN_NUMBER}-${SHORT_SHA}"
          echo "release_version=$VERSION" >> "$GITHUB_OUTPUT"
          echo "image_template_name=${{ inputs.runOutputName }}-${VERSION}" >> "$GITHUB_OUTPUT"

      # ── Resolve template tokens ─────────────────────────────────
      - name: Resolve image template parameters
        shell: bash
        run: |
          set -euo pipefail
          cp "$TEMPLATE_DIR/$TEMPLATE_FILE" "$TEMPLATE_FILE"

          sed -i -e "s|<subscriptionID>|$SUB_ID|g"        "$TEMPLATE_FILE"
          sed -i -e "s|<rgName>|$SIG_RG|g"                "$TEMPLATE_FILE"
          sed -i -e "s|<imageDefName>|$IMAGE_DEF|g"       "$TEMPLATE_FILE"
          sed -i -e "s|<sharedImageGalName>|$SIG_NAME|g"  "$TEMPLATE_FILE"
          sed -i -e "s|<region1>|$PRIMARY_REGION|g"       "$TEMPLATE_FILE"
          sed -i -e "s|<region2>|$ADDL_REGION|g"          "$TEMPLATE_FILE"
          sed -i -e "s|<runOutputName>|$RUN_OUTPUT|g"     "$TEMPLATE_FILE"
          sed -i -e "s%<imgBuilderId>%$IMG_BUILDER_ID%g" "$TEMPLATE_FILE"

      - name: Upload resolved template
        uses: actions/upload-artifact@v4
        with:
          name: resolved-image-template
          path: ${{ env.TEMPLATE_FILE }}

      # ── Submit Image Template ────────────────────────────────────────
      - name: Submit Image Template
        if: github.ref == 'refs/heads/main'
        id: submit_template
        shell: bash
        run: |
          set -euo pipefail
          IMAGE_TEMPLATE_NAME="${{ steps.set_version.outputs.image_template_name }}"
          
          if [[ "${{ inputs.templateType }}" == "imageTemplate" ]]; then
            az resource create \
              --resource-group $SIG_RG \
              --properties @"${{ inputs.templateName }}" \
              --is-full-object \
              --resource-type Microsoft.VirtualMachineImages/imageTemplates \
              -n "$IMAGE_TEMPLATE_NAME"
          elif [[ "${{ inputs.templateType }}" == "armTemplate" ]]; then
            # Use PowerShell to deploy ARM template
            pwsh -Command "
              `$ErrorActionPreference = 'Stop'
              `$templateParams = @{
                imageTemplateName = '$IMAGE_TEMPLATE_NAME'
                svclocation       = '$PRIMARY_REGION'
                'api-version'     = '2022-07-01'
              }
              New-AzResourceGroupDeployment `
                -ResourceGroupName  '$SIG_RG' `
                -TemplateFile       '$TEMPLATE_FILE' `
                -Name               'it-$IMAGE_TEMPLATE_NAME' `
                -TemplateParameterObject `$templateParams
            "
          else
            echo "Invalid template type specified"
            exit 1
          fi
          echo "Template submitted successfully"

  BUILD-DISTRIBUTE-IMAGE:
    needs: PREPARE-IMAGE-TEMPLATE
    runs-on: "windows-latest"
    if: github.ref == 'refs/heads/main'
    
    env:
      SIG_RG: ${{ inputs.sigResourceGroup }}
      TEMPLATE_TYPE: ${{ inputs.templateType }}
      IMAGE_TEMPLATE_NAME: ${{ needs.PREPARE-IMAGE-TEMPLATE.outputs.image_template_name }}

    steps:
      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          enable-AzPSSession: true

      # ── Run Image Build ────────────────────────────────────────
      - name: Build Image (Image Template)
        if: inputs.templateType == 'imageTemplate'
        shell: bash
        run: |
          set -euo pipefail
          
          az resource invoke-action \
            --resource-group $SIG_RG \
            --resource-type Microsoft.VirtualMachineImages/imageTemplates \
            -n "$IMAGE_TEMPLATE_NAME" \
            --action Run
          
          echo "Image build started. This may take 30+ minutes to complete."

      - name: Build Image (ARM Template)
        if: inputs.templateType == 'armTemplate'
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'

          # Invoke build
          Invoke-AzResourceAction `
            -ResourceGroupName $env:SIG_RG `
            -Name              $env:IMAGE_TEMPLATE_NAME `
            -ResourceType      'Microsoft.VirtualMachineImages/imageTemplates' `
            -Action            Run `
            -ApiVersion        '2022-07-01' `
            -Force

          # Poll every minute (30 min max)
          for ($i = 0; $i -lt 30; $i++) {
            Start-Sleep 60
            $res = Get-AzResource `
              -ResourceGroupName $env:SIG_RG `
              -ResourceType      'Microsoft.VirtualMachineImages/imageTemplates' `
              -Name              $env:IMAGE_TEMPLATE_NAME
            $status = $res.Properties.lastRunStatus
            Write-Host ("{0} → {1}" -f $status.runState, $status.runSubState)
            if ($status.runState -eq 'Succeeded') { break }
            if ($status.runState -eq 'Failed')    { throw "Image build failed" }
            if ($status.runState -eq 'Canceled')  { throw "Image build canceled" }
          }

      # ── Run summary ─────────────────────────────────────────────
      - name: Post run summary
        if: always()
        shell: bash
        run: |
          echo "### Azure Image Builder output" >> "$GITHUB_STEP_SUMMARY"
          echo "*${{ inputs.templateType }}:* **${{ needs.PREPARE-IMAGE-TEMPLATE.outputs.image_template_name }}**" >> "$GITHUB_STEP_SUMMARY"
