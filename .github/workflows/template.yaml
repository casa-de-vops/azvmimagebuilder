# .github/workflows/template.yaml
name: "[Template] Build and distribute custom VM image"

description: |
  Reusable workflow that builds and distributes a custom VM image with
  Azure Image Builder (AIB) and publishes the resolved template as an
  artifact.
  
  Features:
  - Supports both ARM templates and Image Builder templates
  - Validates templates before deployment
  - Configurable timeout for image building process
  - Automatic version generation based on run number and commit SHA
  - Real-time build status monitoring
  - Support for multi-region image distribution

on:
  workflow_call:
    inputs:
      # Template configuration
      templateFolder:
        description: "Folder path containing the template files (relative to repo root)"
        type: string
        required: true
      templateName:
        description: "Name of the template file to use"
        type: string
        required: true
      templateType:
        description: "Type of template to use for image building"
        type: string
        required: true
        default: "imageTemplate"
      
      # Azure resource configuration
      sigResourceGroup:
        description: "Resource group containing the Shared Image Gallery"
        type: string
        required: true
      imageDefName:
        description: "Name of the image definition in the Shared Image Gallery"
        type: string
        required: true
      sigName:
        description: "Name of the Shared Image Gallery"
        type: string
        required: true
      uaiIdentityName:
        description: "Name of the User Assigned Identity for Image Builder"
        type: string
        required: true
      
      # Location configuration
      location:
        description: "Primary Azure region for image deployment"
        type: string
        required: true
      additionalregion:
        description: "Optional secondary Azure region for image replication"
        type: string
        required: false
        default: ''
      
      # Output configuration
      runOutputName:
        description: "Base name for the image template output"
        type: string
        required: true
      
      # Advanced configuration
      timeout:
        description: "Timeout in minutes for image creation process"
        type: number
        required: false
        default: 60
      deployToBranches:
        description: "Git branch patterns where image deployment should occur"
        type: string
        required: false
        default: "refs/heads/main,refs/heads/release*"

    secrets:
      AZURE_CLIENT_ID: { required: true }
      AZURE_TENANT_ID: { required: true }
      AZURE_SUBSCRIPTION_ID: { required: true }

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: write
  id-token: write
  actions: read
  security-events: write

jobs:
  BUILD-PREPARE-IMAGE:
    runs-on: 'windows-latest'

    env:
      SUB_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      SIG_RG: ${{ inputs.sigResourceGroup }}
      TEMPLATE_FILE: ${{ inputs.templateName }}
      TEMPLATE_DIR: templates/${{ inputs.templateFolder }}
      TEMPLATE_TYPE: ${{ inputs.templateType }}
      IMAGE_DEF: ${{ inputs.imageDefName }}
      SIG_NAME: ${{ inputs.sigName }}
      PRIMARY_REGION: ${{ inputs.location }}
      ADDL_REGION: ${{ inputs.additionalregion }}
      RUN_OUTPUT: ${{ inputs.runOutputName }}
      IMG_BUILDER_ID: "/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ inputs.sigResourceGroup }}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/${{ inputs.uaiIdentityName }}"

    outputs:
      release_version: ${{ steps.set_version.outputs.release_version }}

    steps:
      # ─────────────────────────────────────────────────────────────
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          enable-AzPSSession: true

      # ── Version = run‑number‑shortSHA ───────────────────────────
      - name: Set version
        id: set_version
        shell: bash
        run: |
          set -euo pipefail
          SHORT_SHA=$(echo "${GITHUB_SHA}" | cut -c1-7)
          VERSION="${GITHUB_RUN_NUMBER}-${SHORT_SHA}"
          echo "release_version=$VERSION" >> "$GITHUB_OUTPUT"

      # ── Resolve template tokens ─────────────────────────────────
      - name: Resolve image template parameters
        shell: bash
        run: |
          set -euo pipefail
          cp "$TEMPLATE_DIR/$TEMPLATE_FILE" "$TEMPLATE_FILE"

          sed -i -e "s|<subscriptionID>|$SUB_ID|g"        "$TEMPLATE_FILE"
          sed -i -e "s|<rgName>|$SIG_RG|g"                "$TEMPLATE_FILE"
          sed -i -e "s|<imageDefName>|$IMAGE_DEF|g"       "$TEMPLATE_FILE"
          sed -i -e "s|<sharedImageGalName>|$SIG_NAME|g"  "$TEMPLATE_FILE"
          sed -i -e "s|<region1>|$PRIMARY_REGION|g"       "$TEMPLATE_FILE"
          sed -i -e "s|<region2>|$ADDL_REGION|g"          "$TEMPLATE_FILE"
          sed -i -e "s|<runOutputName>|$RUN_OUTPUT|g"     "$TEMPLATE_FILE"
          sed -i -e "s%<imgBuilderId>%$IMG_BUILDER_ID%g" "$TEMPLATE_FILE"

      - name: Upload resolved template
        uses: actions/upload-artifact@v4
        with:
          name: resolved-image-template
          path: ${{ env.TEMPLATE_FILE }}

      # ── Validate Template ─────────────────────────────────────
      - name: Validate Image Template
        if: inputs.templateType == 'imageTemplate'
        shell: bash
        run: |
          set -euo pipefail
          RELEASE_VERSION=${{ steps.set_version.outputs.release_version }}
          IMAGE_TEMPLATE_NAME="${{ inputs.runOutputName }}-${RELEASE_VERSION}"
          
          echo "Validating Image Template: $IMAGE_TEMPLATE_NAME"
          echo "Template file: $TEMPLATE_FILE"
          echo "Resource group: $SIG_RG"
          
          # Pre-validate template file existence
          if [ ! -f "$TEMPLATE_FILE" ]; then
            echo "Error: Template file $TEMPLATE_FILE not found!"
            exit 1
          fi
          
          # NOTE: Azure CLI doesn't have a dedicated validation command for image templates
          # So we'll use az image builder commands which are more robust
          echo "Creating image template for validation..."
          
          # Check if az image builder commands are available
          if az image builder --help &>/dev/null; then
            # Use az image builder commands
            if ! az image builder template show --resource-group $SIG_RG --name "$IMAGE_TEMPLATE_NAME" &>/dev/null; then
              az image builder template create \
                --resource-group $SIG_RG \
                --name "$IMAGE_TEMPLATE_NAME" \
                --json-file "$TEMPLATE_FILE" || {
                  echo "Failed to create image template for validation"
                  exit 1
                }
                
              echo "Template validation passed - cleaning up test template"
              az image builder template delete \
                --resource-group $SIG_RG \
                --name "$IMAGE_TEMPLATE_NAME"
            else
              echo "Template already exists, validation passed"
            fi
          else
            # Fallback to resource approach with basic validation
            echo "Using fallback validation method (basic file check only)"
            # Use Python to validate the JSON (Python is pre-installed on GitHub runners)
            python3 -c "import json; json.load(open('$TEMPLATE_FILE'))" && \
              echo "✅ Basic template validation successful" || {
                echo "❌ Template JSON validation failed!"
                exit 1
              }
          fi

      - name: Validate ARM Template
        if: inputs.templateType == 'armTemplate'
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          
          $releaseVersion = '${{ steps.set_version.outputs.release_version }}'
          $imageTemplate = "${{ inputs.runOutputName }}-$releaseVersion"
          
          Write-Host "Validating ARM template:"
          Write-Host "- Template file: $env:TEMPLATE_FILE"
          Write-Host "- Resource group: $env:SIG_RG" 
          Write-Host "- Image template name: $imageTemplate"
          
          # Pre-validate template file existence
          if (-not (Test-Path -Path $env:TEMPLATE_FILE)) {
            Write-Host "Error: Template file $env:TEMPLATE_FILE not found!" -ForegroundColor Red
            exit 1
          }
          
          # Build the parameter object expected by your template
          $templateParams = @{
            imageTemplateName = $imageTemplate
            svclocation       = $env:PRIMARY_REGION
            'api-version'     = '2022-07-01'
          }
          
          # Validate the ARM template without deploying
          Write-Host "Running ARM template validation..."
          Test-AzResourceGroupDeployment `
            -ResourceGroupName $env:SIG_RG `
            -TemplateFile $env:TEMPLATE_FILE `
            -TemplateParameterObject $templateParams
          
          Write-Host "✅ ARM Template validation successful" -ForegroundColor Green

  DEPLOY-CUSTOM-IMAGE:
    needs: BUILD-PREPARE-IMAGE
    runs-on: 'windows-latest'
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/release')

    env:
      SIG_RG: ${{ inputs.sigResourceGroup }}
      PRIMARY_REGION: ${{ inputs.location }}
      TEMPLATE_FILE: ${{ inputs.templateName }}
      RELEASE_VERSION: ${{ needs.BUILD-PREPARE-IMAGE.outputs.release_version }}

    steps:
      - name: Download resolved template
        uses: actions/download-artifact@v4
        with:
          name: resolved-image-template

      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          enable-AzPSSession: true

      # ── Image Template build path ────────────────────────────────────────
      - name: Build & distribute image (Image Template)
        if: inputs.templateType == 'imageTemplate'
        shell: bash
        run: |
          set -euo pipefail
          IMAGE_TEMPLATE_NAME="${{ inputs.runOutputName }}-${RELEASE_VERSION}"
          
          echo "Creating image template: $IMAGE_TEMPLATE_NAME"
          # Check if az image builder commands are available
          if az image builder --help &>/dev/null; then
            # Use az image builder commands (recommended)
            echo "Using az image builder commands..."
            az image builder template create \
              --resource-group $SIG_RG \
              --name "$IMAGE_TEMPLATE_NAME" \
              --json-file "$TEMPLATE_FILE"
          
            echo "Running image build..."
            az image builder run \
              --resource-group $SIG_RG \
              --name "$IMAGE_TEMPLATE_NAME"
          else
            # Fallback to resource commands
            echo "Using az resource commands (fallback)..."
            az resource create \
                --resource-group $SIG_RG \
                --properties @"$TEMPLATE_FILE" \
                --is-full-object \
                --resource-type Microsoft.VirtualMachineImages/imageTemplates \
                -n "$IMAGE_TEMPLATE_NAME"
            
            echo "Starting image build process..."
            az resource invoke-action \
                --resource-group $SIG_RG \
                --resource-type Microsoft.VirtualMachineImages/imageTemplates \
                -n "$IMAGE_TEMPLATE_NAME" \
                --action Run
          fi
          
          # Wait for the image to be created with timeout and status monitoring
          echo "Waiting for image creation to complete..."
          TIMEOUT_MINUTES=${{ inputs.timeout }}
          END_TIME=$(($(date +%s) + TIMEOUT_MINUTES*60))
          echo "Timeout set to $TIMEOUT_MINUTES minutes (will timeout at $(date -d @$END_TIME '+%Y-%m-%d %H:%M:%S'))"
          
          while [ $(date +%s) -lt $END_TIME ]; do
            if az image builder --help &>/dev/null; then
              STATUS=$(az image builder template show \
                --resource-group $SIG_RG \
                --name "$IMAGE_TEMPLATE_NAME" \
                --query lastRunStatus.runState -o tsv)
                
              SUB_STATUS=$(az image builder template show \
                --resource-group $SIG_RG \
                --name "$IMAGE_TEMPLATE_NAME" \
                --query lastRunStatus.runSubState -o tsv 2>/dev/null || echo "Unknown")
            else
              STATUS=$(az resource show \
                --resource-group $SIG_RG \
                --resource-type Microsoft.VirtualMachineImages/imageTemplates \
                --name "$IMAGE_TEMPLATE_NAME" \
                --query "properties.lastRunStatus.runState" -o tsv)
                
              SUB_STATUS=$(az resource show \
                --resource-group $SIG_RG \
                --resource-type Microsoft.VirtualMachineImages/imageTemplates \
                --name "$IMAGE_TEMPLATE_NAME" \
                --query "properties.lastRunStatus.runSubState" -o tsv 2>/dev/null || echo "Unknown")
            fi
            
            echo "$(date +"%Y-%m-%d %H:%M:%S") - Status: $STATUS → $SUB_STATUS"
            
            if [ "$STATUS" = "Succeeded" ]; then
              echo "Image creation completed successfully!"
              break
            elif [ "$STATUS" = "Failed" ]; then
              echo "Image creation failed!"
              if az image builder --help &>/dev/null; then
                az image builder template show \
                  --resource-group $SIG_RG \
                  --name "$IMAGE_TEMPLATE_NAME" \
                  --query lastRunStatus -o json
              else
                az resource show \
                  --resource-group $SIG_RG \
                  --resource-type Microsoft.VirtualMachineImages/imageTemplates \
                  --name "$IMAGE_TEMPLATE_NAME" \
                  --query "properties.lastRunStatus" -o json
              fi
              exit 1
            fi
            
            # Wait for 60 seconds before checking again
            sleep 60
          done
          
          if [ $(date +%s) -ge $END_TIME ]; then
            echo "Timed out waiting for image creation to complete!"
            exit 1
          fi

      # ── ARM Template build path ──────────────────────────────────────
      - name: Build & distribute image (ARM Template)
        if: inputs.templateType == 'armTemplate'
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'

          $releaseVersion = '${{ needs.BUILD-PREPARE-IMAGE.outputs.release_version }}'
          $imageTemplate  = "${{ inputs.runOutputName }}-$releaseVersion"

          # --- Build the parameter object expected by your template ---
          $templateParams = @{
              imageTemplateName = $imageTemplate
              svclocation       = $env:PRIMARY_REGION
              'api-version'     = '2022-07-01'
          }

          # Submit the template
          New-AzResourceGroupDeployment `
            -ResourceGroupName  $env:SIG_RG `
            -TemplateFile       $TEMPLATE_FILE `
            -Name               "it-$imageTemplate" `
            -TemplateParameterObject $templateParams

          # Invoke build
          Invoke-AzResourceAction `
            -ResourceGroupName $env:SIG_RG `
            -Name              $imageTemplate `
            -ResourceType      'Microsoft.VirtualMachineImages/imageTemplates' `
            -Action            Run `
            -ApiVersion        '2022-07-01' `
            -Force

          # Poll every minute (using timeout parameter)
          $timeoutMinutes = [int]'${{ inputs.timeout }}'
          $maxAttempts = $timeoutMinutes
          $startTime = Get-Date
          $timeoutTime = $startTime.AddMinutes($timeoutMinutes)
          
          Write-Host "Starting image build monitoring at $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')"
          Write-Host "Timeout set to $timeoutMinutes minutes (will timeout at $timeoutTime)"
          
          for ($i = 0; $i -lt $maxAttempts; $i++) {
            if ((Get-Date) -gt $timeoutTime) {
              Write-Host "Timeout reached after $timeoutMinutes minutes"
              throw "Timed out waiting for image to build"
            }
            
            Start-Sleep 60
            $res = Get-AzResource `
                    -ResourceGroupName $env:SIG_RG `
                    -ResourceType      'Microsoft.VirtualMachineImages/imageTemplates' `
                    -Name              $imageTemplate
            $status = $res.Properties.lastRunStatus
            $currentTime = Get-Date -Format 'yyyy-MM-dd HH:mm:ss'
            Write-Host "$currentTime - Status: $($status.runState) → $($status.runSubState)"
            
            if ($status.runState -eq 'Succeeded') { 
              Write-Host "Image creation completed successfully!"
              break 
            }
            if ($status.runState -eq 'Failed') {
              Write-Host "Image creation failed!" -ForegroundColor Red
              $res.Properties.lastRunStatus | ConvertTo-Json -Depth 5
              throw "Image build failed: $($status.message)"
            }
          }

      # ── Run summary ─────────────────────────────────────────────
      - name: Post run summary
        if: always()
        shell: bash
        run: |
          echo "### Azure Image Builder output" >> "$GITHUB_STEP_SUMMARY"
          echo "*Template Type:* **${{ inputs.templateType }}**" >> "$GITHUB_STEP_SUMMARY"
          echo "*Image Template:* **${{ inputs.runOutputName }}-${{ env.RELEASE_VERSION }}**" >> "$GITHUB_STEP_SUMMARY"
          echo "*Primary Region:* **${{ inputs.location }}**" >> "$GITHUB_STEP_SUMMARY"
          if [[ -n "${{ inputs.additionalregion }}" ]]; then
            echo "*Additional Region:* **${{ inputs.additionalregion }}**" >> "$GITHUB_STEP_SUMMARY"
          fi
          echo "*Image Definition:* **${{ inputs.imageDefName }}**" >> "$GITHUB_STEP_SUMMARY"
          echo "*Shared Image Gallery:* **${{ inputs.sigName }}**" >> "$GITHUB_STEP_SUMMARY"
          
          if [[ "${{ job.status }}" == "success" ]]; then
            echo "✅ **Image build successful**" >> "$GITHUB_STEP_SUMMARY"
          else
            echo "❌ **Image build failed**" >> "$GITHUB_STEP_SUMMARY"
          fi
