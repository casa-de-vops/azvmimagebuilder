name: create_custom_vm_image
on: [workflow_dispatch]

permissions:
  contents: read
  id-token: write
  actions: read
  security-events: write # only if you surface MSDO results in CodeQL alerts

env:
  SEMVERBOT_VERSION: "1.0.0" # bump here when you need a new semverbot

jobs:
  BUILD-CUSTOM-IMAGE:
    runs-on: ubuntu-latest # ⬅ easiest way to run the Linux binary
    steps:
      # ------------------- 1. Code checkout -------------------
      - name: Checkout repository
        uses: actions/checkout@v4

      # ------------------- 2. Azure login ---------------------
      - name: Login with Azure OIDC
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # ------------------- 3. Install semverbot ---------------
      - name: Install semverbot
        shell: bash # make sure we’re in a POSIX shell
        run: |
          mkdir -p "$HOME/bin"
          echo "$HOME/bin" >> "$GITHUB_PATH"

          curl -sL \
            -o "$HOME/bin/sbot" \
            "https://github.com/restechnica/semverbot/releases/download/v${SEMVERBOT_VERSION}/sbot-linux-amd64"
          chmod +x "$HOME/bin/sbot"

          # (optional) verify checksum – insert sha256sum here if you wish
          # echo "<sha256>  $HOME/bin/sbot" | sha256sum -c -

      # ------------------- 4. Compute next version -------------
      - name: Compute version bump
        shell: bash
        run: |
          sbot update version
          echo "CURRENT_VERSION=$(sbot get version)"   >> "$GITHUB_ENV"
          echo "RELEASE_VERSION=$(sbot predict version)" >> "$GITHUB_ENV"
          echo "Current: $CURRENT_VERSION"
          echo "Next:    $RELEASE_VERSION"

      # ------------------- 5. Download and configure image template -------------
      - name: Download and configure image template
        shell: bash
        env:
          subscriptionID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          sigResourceGroup: rg-connectivity-prod-westus2-example-001
          imageDefName: GoldenImage
          sigName: appImageGallery
          location: westus2
          additionalregion: eastus2
          runOutputName: GoldenImage
          imgBuilderId: /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/rg-connectivity-prod-westus2-example-001/providers/Microsoft.ManagedIdentity/userAssignedIdentities/rai-identity
        run: |
          curl https://raw.githubusercontent.com/danielsollondon/azvmimagebuilder/master/quickquickstarts/1_Creating_a_Custom_Linux_Shared_Image_Gallery_Image/helloImageTemplateforSIG.json -o helloImageTemplateforSIG.json

          sed -i -e "s/<subscriptionID>/$subscriptionID/g" helloImageTemplateforSIG.json
          sed -i -e "s/<rgName>/$sigResourceGroup/g" helloImageTemplateforSIG.json
          sed -i -e "s/<imageDefName>/$imageDefName/g" helloImageTemplateforSIG.json
          sed -i -e "s/<sharedImageGalName>/$sigName/g" helloImageTemplateforSIG.json

          sed -i -e "s/<region1>/$location/g" helloImageTemplateforSIG.json
          sed -i -e "s/<region2>/$additionalregion/g" helloImageTemplateforSIG.json
          sed -i -e "s/<runOutputName>/$runOutputName/g" helloImageTemplateforSIG.json

          sed -i -e "s%<imgBuilderId>%$imgBuilderId%g" helloImageTemplateforSIG.json

      # ------------------- 5. Build & distribute image --------
      - name: Build and distribute custom VM image
        shell: bash
        env:
          subscriptionID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          sigResourceGroup: rg-connectivity-prod-westus2-example-001
          imageDefName: GoldenImage
          sigName: appImageGallery
          location: westus2
          additionalregion: westus2
          runOutputName: GoldenImage
          imgBuilderId: /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/rg-connectivity-prod-westus2-example-001/providers/Microsoft.ManagedIdentity/userAssignedIdentities/rai-identity
        run: |
            IMAGE_TEMPLATE_NAME="helloImageTemplateforSIG-${RELEASE_VERSION}"

            az resource create \
            --resource-group $sigResourceGroup \
            --properties @helloImageTemplateforSIG.json \
            --is-full-object \
            --resource-type Microsoft.VirtualMachineImages/imageTemplates \
            -n "$IMAGE_TEMPLATE_NAME"
            
            az resource invoke-action \
              --resource-group $sigResourceGroup \
              --resource-type Microsoft.VirtualMachineImages/imageTemplates \
              -n "$IMAGE_TEMPLATE_NAME" \
              --action Run 

      # ------------------- 6. Tag and push the release --------
      - name: Release and push version tag
        shell: bash
        run: |
          sbot release version
          sbot push version
