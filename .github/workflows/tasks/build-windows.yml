name: Build image (Windows)
description: Submit Azure Image Builder template and wait for completion
inputs:
  resolved_path:     { required: true }
  sigResourceGroup:  { required: true }
  imgTemplateName:   { required: true }
  runOutputName:     { required: true }
  location:          { required: true }
  buildTimeoutMins:  { required: true }
runs:
  using: composite
  steps:
    - name: Azure login
      uses: azure/login@v2
      with:
        client-id:       ${{ env.AZURE_CLIENT_ID }}
        tenant-id:       ${{ env.AZURE_TENANT_ID }}
        subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}
        enable-AzPSSession: true

    - name: Ensure Az.ImageBuilder module
      shell: pwsh
      run: |
        if (-not (Get-Module -ListAvailable Az.ImageBuilder)) {
          Install-Module -Name Az.ImageBuilder -Scope CurrentUser -Force
        }

    - name: Submit & start
      shell: pwsh
      run: |
        $params = @{
          imageTemplateName = '${{ inputs.imgTemplateName }}'
          svclocation       = '${{ inputs.location }}'
          'api-version'     = '2022-07-01'
        }
        New-AzResourceGroupDeployment `
          -ResourceGroupName '${{ inputs.sigResourceGroup }}' `
          -TemplateFile      '${{ inputs.resolved_path }}' `
          -Name              "it-${{ inputs.imgTemplateName }}" `
          -TemplateParameterObject $params

        Invoke-AzResourceAction `
          -ResourceGroupName '${{ inputs.sigResourceGroup }}' `
          -Name              '${{ inputs.imgTemplateName }}' `
          -ResourceType      'Microsoft.VirtualMachineImages/imageTemplates' `
          -Action            Run `
          -ApiVersion        '2022-07-01' -Force

    - id: wait
      shell: pwsh
      run: |
        $rg   = '${{ inputs.sigResourceGroup }}'
        $name = '${{ inputs.imgTemplateName }}'
        $tries = [math]::Ceiling(${{ inputs.buildTimeoutMins }} * 60 / 30)
        for ($i = 0; $i -lt $tries; $i++) {
          Start-Sleep 30
          $state = (Get-AzResource -ResourceGroupName $rg `
            -ResourceType Microsoft.VirtualMachineImages/imageTemplates `
            -Name $name).Properties.lastRunStatus.runState
          Write-Host "$(Get-Date -Format T) runState=$state"
          if ($state -eq 'Succeeded' -or $state -eq 'Failed') {
            "state=$state" | Out-File -Append -FilePath $env:GITHUB_OUTPUT
            break
          }
        }
        if ($state -ne 'Succeeded') { throw "Image build failed (state=$state)" }

    - name: Set composite output
      shell: pwsh
      run: |
        "run_state=${{ steps.wait.outputs.state }}" | Out-File -Append -FilePath $env:GITHUB_OUTPUT
outputs:
  run_state:
    value: ${{ steps.wait.outputs.state }}
