name: "[Template] Build and distribute custom VM image"

description: |
  This workflow builds and distributes a custom VM image using the Azure Image Builder service.
  It uses a template to create a shared image gallery image and distribute it across regions.

on:
  workflow_call:
    inputs:
      templateFolder: { required: true, type: string }
      templateName: { required: true, type: string }
      sigResourceGroup: { required: true, type: string }
      imageDefName: { required: true, type: string }
      sigName: { required: true, type: string }
      location: { required: true, type: string }
      additionalregion: { required: true, type: string }
      runOutputName: { required: true, type: string }
    secrets:
      AZURE_CLIENT_ID: { required: true }
      AZURE_TENANT_ID: { required: true }
      AZURE_SUBSCRIPTION_ID: { required: true }

permissions:
  contents: write
  id-token: write
  actions: read
  security-events: write

concurrency:
  group: "semverbot-release-${{ github.ref_name }}"
  cancel-in-progress: false

env:
  SEMVERBOT_VERSION: "1.7.2"

jobs:
  BUILD-CUSTOM-IMAGE:
    runs-on: ubuntu-latest
    outputs:
      release_version: ${{ steps.set_version.outputs.release_version }}
    steps:
      # ---------------------------------------------
      # Checkout repo with full history & tags
      # ---------------------------------------------
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      # ---------------------------------------------
      # Azure login (OIDC)
      # ---------------------------------------------
      - name: Login with Azure OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # ---------------------------------------------
      # Normalise branch name so HEAD is on a *local* branch
      # ---------------------------------------------
      - name: Prepare branch for SemVerBot
        id: branch
        shell: bash
        run: |
          set -euo pipefail
          # 1. Resolve branch name
          RAW_BRANCH="${{ github.head_ref || github.ref_name }}"
          BRANCH_NAME=$(echo "$RAW_BRANCH" | sed -e 's#^refs/heads/##' -e 's#[\r\n]##g')
          echo "Resolved branch: $BRANCH_NAME"

          # 2. Make sure we have a *local* branch checked out
          if git show-ref --verify --quiet "refs/heads/$BRANCH_NAME"; then
            git switch "$BRANCH_NAME"
          else
            git switch -c "$BRANCH_NAME" --track "origin/$BRANCH_NAME"
          fi

          # 3. Persist for later steps
          echo "BRANCH_NAME=$BRANCH_NAME" >> "$GITHUB_ENV"

      # ---------------------------------------------
      # Install SemVerBot binary
      # ---------------------------------------------
      - name: Install SemVerBot
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p "$HOME/bin"
          echo "$HOME/bin" >> "$GITHUB_PATH"
          curl -sL -o "$HOME/bin/sbot" \
            "https://github.com/restechnica/semverbot/releases/download/v${SEMVERBOT_VERSION}/sbot-linux-amd64"
          chmod +x "$HOME/bin/sbot"

      # ---------------------------------------------
      # Compute next semantic version
      # ---------------------------------------------
      - name: Compute version bump
        id: set_version
        shell: bash
        run: |
          set -euo pipefail
          sbot update version
          current=$(sbot get version)
          next=$(sbot predict version)

          echo "Current version: $current"
          echo "Next version:    $next"

          echo "CURRENT_VERSION=$current" >> "$GITHUB_ENV"
          echo "RELEASE_VERSION=$next"   >> "$GITHUB_ENV"
          echo "release_version=$next"   >> "$GITHUB_OUTPUT"

      # ---------------------------------------------
      # Replace tokens in Image Builder template
      # ---------------------------------------------
      - name: Download and configure image template
        shell: bash
        env:
          subscriptionID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          sigResourceGroup: ${{ inputs.sigResourceGroup }}
          imageDefName: ${{ inputs.imageDefName }}
          sigName: ${{ inputs.sigName }}
          location: ${{ inputs.location }}
          additionalregion: ${{ inputs.additionalregion }}
          runOutputName: ${{ inputs.runOutputName }}
          imgBuilderId: "/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ inputs.sigResourceGroup }}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/rai-identity"
        run: |
          set -euo pipefail
          cp templates/${{ inputs.templateFolder }}/${{ inputs.templateName }} ${{ inputs.templateName }}

          sed -i -e "s|<subscriptionID>|$subscriptionID|g"             ${{ inputs.templateName }}
          sed -i -e "s|<rgName>|$sigResourceGroup|g"                   ${{ inputs.templateName }}
          sed -i -e "s|<imageDefName>|$imageDefName|g"                ${{ inputs.templateName }}
          sed -i -e "s|<sharedImageGalName>|$sigName|g"               ${{ inputs.templateName }}
          sed -i -e "s|<region1>|$location|g"                         ${{ inputs.templateName }}
          sed -i -e "s|<region2>|$additionalregion|g"                 ${{ inputs.templateName }}
          sed -i -e "s|<runOutputName>|$runOutputName|g"              ${{ inputs.templateName }}
          sed -i -e "s%<imgBuilderId>%$imgBuilderId%g"                ${{ inputs.templateName }}

      # ---------------------------------------------
      # Build & distribute the image
      # ---------------------------------------------
      - name: Build and distribute custom VM image
        shell: bash
        env:
          subscriptionID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          sigResourceGroup: ${{ inputs.sigResourceGroup }}
          imageDefName: ${{ inputs.imageDefName }}
          sigName: ${{ inputs.sigName }}
          location: ${{ inputs.location }}
          additionalregion: ${{ inputs.additionalregion }}
          runOutputName: ${{ inputs.runOutputName }}
          imgBuilderId: "/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ inputs.sigResourceGroup }}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/rai-identity"
        run: |
          set -euo pipefail
          IMAGE_TEMPLATE_NAME="${{ inputs.templateName }}-${RELEASE_VERSION}"

          az resource create \
            --resource-group $sigResourceGroup \
            --properties @${{ inputs.templateName }} \
            --is-full-object \
            --resource-type Microsoft.VirtualMachineImages/imageTemplates \
            -n "$IMAGE_TEMPLATE_NAME"

          az resource invoke-action \
            --resource-group $sigResourceGroup \
            --resource-type Microsoft.VirtualMachineImages/imageTemplates \
            -n "$IMAGE_TEMPLATE_NAME" \
            --action Run

      # ---------------------------------------------
      # Publish the git tag (only on main)
      # ---------------------------------------------
      - name: Release and push version tag
        if: github.ref == 'refs/heads/main'
        shell: bash
        run: |
          set -euo pipefail
          sbot release version
          sbot push version
