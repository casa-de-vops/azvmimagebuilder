name: "[Template] Build and distribute custom VM image"

description: |
  This workflow builds and distributes a custom VM image using the Azure Image Builder service.
  It uses a template to create a shared image gallery image and distribute it across regions.

on:
  workflow_call:
    inputs:
      templateFolder: { required: true, type: string }
      templateName: { required: true, type: string }
      sigResourceGroup: { required: true, type: string }
      imageDefName: { required: true, type: string }
      sigName: { required: true, type: string }
      location: { required: true, type: string }
      additionalregion: { required: true, type: string }
      runOutputName: { required: true, type: string }
      buildOS:
        {
          required: true,
          type: string,
          default: "linux",
          description: "Choose either 'linux' or 'windows'",
        }
    secrets:
      AZURE_CLIENT_ID: { required: true }
      AZURE_TENANT_ID: { required: true }
      AZURE_SUBSCRIPTION_ID: { required: true }

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: write
  id-token: write
  actions: read
  security-events: write

jobs:
  BUILD-CUSTOM-IMAGE:
    runs-on: ${{ inputs.buildOS == 'windows' && 'windows-latest' || 'ubuntu-latest' }}
    outputs:
      release_version: ${{ steps.set_version.outputs.release_version }}
    steps:
      # ---------------------------------------------
      # Checkout repo with full history & tags
      # ---------------------------------------------
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      # ---------------------------------------------
      # Azure login (OIDC)
      # ---------------------------------------------
      - name: Login with Azure OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          enable-AzPSSession: true

      # ---------------------------------------------
      # Normalise branch name so HEAD is on a *local* branch
      # ---------------------------------------------
      - name: Prepare branch for versioning
        id: branch
        shell: bash
        run: |
          set -euo pipefail
          # Resolve branch name
          RAW_BRANCH="${{ github.head_ref || github.ref_name }}"
          BRANCH_NAME=$(echo "$RAW_BRANCH" | sed -e 's#^refs/heads/##' -e 's#[\r\n]##g')
          echo "Resolved branch: $BRANCH_NAME"

          # Make sure we have a *local* branch checked out
          if git show-ref --verify --quiet "refs/heads/$BRANCH_NAME"; then
              git switch "$BRANCH_NAME"
          else
              git switch -c "$BRANCH_NAME" --track "origin/$BRANCH_NAME"
          fi

          echo "BRANCH_NAME=$BRANCH_NAME" >> "$GITHUB_ENV"

      # ---------------------------------------------
      # Set version using a simple timestamp
      # ---------------------------------------------
      - name: Set version
        id: set_version
        shell: bash
        run: |
          set -euo pipefail
          VERSION=$(date +%Y%m%d%H%M%S)
          echo "Current version: $VERSION"
          echo "release_version=$VERSION" >> "$GITHUB_OUTPUT"

      # ---------------------------------------------
      # Replace tokens in Image Builder template
      # ---------------------------------------------
      - name: Download and configure image template
        shell: bash
        env:
          subscriptionID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          sigResourceGroup: ${{ inputs.sigResourceGroup }}
          imageDefName: ${{ inputs.imageDefName }}
          sigName: ${{ inputs.sigName }}
          location: ${{ inputs.location }}
          additionalregion: ${{ inputs.additionalregion }}
          runOutputName: ${{ inputs.runOutputName }}
          imgBuilderId: "/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ inputs.sigResourceGroup }}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/rai-identity"
        run: |
          set -euo pipefail
          cp templates/${{ inputs.templateFolder }}/${{ inputs.templateName }} ${{ inputs.templateName }}

          sed -i -e "s|<subscriptionID>|$subscriptionID|g"             ${{ inputs.templateName }}
          sed -i -e "s|<rgName>|$sigResourceGroup|g"                   ${{ inputs.templateName }}
          sed -i -e "s|<imageDefName>|$imageDefName|g"                 ${{ inputs.templateName }}
          sed -i -e "s|<sharedImageGalName>|$sigName|g"                ${{ inputs.templateName }}
          sed -i -e "s|<region1>|$location|g"                          ${{ inputs.templateName }}
          sed -i -e "s|<region2>|$additionalregion|g"                  ${{ inputs.templateName }}
          sed -i -e "s|<runOutputName>|$runOutputName|g"               ${{ inputs.templateName }}
          sed -i -e "s%<imgBuilderId>%$imgBuilderId%g"                 ${{ inputs.templateName }}

        # ─────────────────────────────────────────────────────────────
        # Build and distribute custom VM image – dual‑OS implementation
        # ─────────────────────────────────────────────────────────────

        # ── Linux / macOS runners ────────────────────────────────────
      - name: Build and distribute custom VM image (Linux)
        if: runner.os != 'Windows' # ← original path unchanged
        shell: bash
        env:
          subscriptionID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          sigResourceGroup: ${{ inputs.sigResourceGroup }}
          imageDefName: ${{ inputs.imageDefName }}
          sigName: ${{ inputs.sigName }}
          location: ${{ inputs.location }}
          additionalregion: ${{ inputs.additionalregion }}
          runOutputName: ${{ inputs.runOutputName }}
          imgBuilderId: "/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ inputs.sigResourceGroup }}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/rai-identity"
        run: |
          set -euo pipefail
          RELEASE_VERSION=${{ steps.set_version.outputs.release_version }}
          IMAGE_TEMPLATE_NAME="${{ inputs.runOutputName }}-${RELEASE_VERSION}"

          az resource create \
              --resource-group $sigResourceGroup \
              --properties @"${{ inputs.templateName }}" \
              --is-full-object \
              --resource-type Microsoft.VirtualMachineImages/imageTemplates \
              -n "$IMAGE_TEMPLATE_NAME"

          az resource invoke-action \
              --resource-group $sigResourceGroup \
              --resource-type Microsoft.VirtualMachineImages/imageTemplates \
              -n "$IMAGE_TEMPLATE_NAME" \
              --action Run

        # ── Windows runners ──────────────────────────────────────────
      - name: Build and distribute custom VM image (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        env:
          subscriptionID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          imageResourceGroup: ${{ inputs.sigResourceGroup }}
          templateFilePath: ${{ inputs.templateName }}
          location: ${{ inputs.location }}
          runOutputName: ${{ inputs.runOutputName }}
        run: |
          $ErrorActionPreference = 'Stop'

          $releaseVersion    = '${{ steps.set_version.outputs.release_version }}'
          $imageTemplateName = "${env:runOutputName}-$releaseVersion"

          # ── Build the parameter object expected by your template ──────────────
          $templateParams = @{
            "imageTemplateName" = $imageTemplateName
            "svclocation"       = $env:location
            "api-version"       = "2019-05-01-preview"
          }

          # ── Submit (validate + stage) the template ────────────────────────────
          New-AzResourceGroupDeployment `
          -ResourceGroupName      $env:imageResourceGroup `
          -TemplateFile           $env:templateFilePath `
          -Name                   "it-$imageTemplateName" `
          -TemplateParameterObject $templateParams

          # ── Trigger the build ────────────────────────────────────────────────
          Invoke-AzResourceAction `
          -ResourceName      $imageTemplateName `
          -ResourceGroupName $env:imageResourceGroup `
          -ResourceType      'Microsoft.VirtualMachineImages/imageTemplates' `
          -ApiVersion        '2019-05-01-preview' `
          -Action            Run `
          -Force

          ### Query the Image Template for Current or Last Run Status and Image Template Settings
          $managementEp = $currentAzureContext.Environment.ResourceManagerUrl

          $urlBuildStatus = [System.String]::Format("{0}subscriptions/{1}/resourceGroups/$imageResourceGroup/providers/Microsoft.VirtualMachineImages/imageTemplates/{2}?api-version=2019-05-01-preview", $managementEp, $currentAzureContext.Subscription.Id, $imageTemplateName)

          $buildStatusResult = Invoke-WebRequest -Method GET -Uri $urlBuildStatus -UseBasicParsing -Headers @{ "Authorization" = ("Bearer " + $accessToken) } -ContentType application/json 
          $buildJsonStatus = $buildStatusResult.Content
          Write-Host $buildJsonStatus

          ### Query the Distribution properties
          $urlRunOutputStatus = [System.String]::Format("{0}subscriptions/{1}/resourceGroups/$imageResourceGroup/providers/Microsoft.VirtualMachineImages/imageTemplates/$imageTemplateName/runOutputs/{2}?api-version=2019-05-01-preview", $managementEp, $currentAzureContext.Subscription.Id, $env:runOutputName)

          $runOutStatusResult = Invoke-WebRequest -Method GET -Uri $urlRunOutputStatus -UseBasicParsing -Headers @{ "Authorization" = ("Bearer " + $accessToken) } -ContentType application/json 
          $runOutJsonStatus = $runOutStatusResult.Content
          Write-Host $runOutJsonStatus
